groupID - identifica um grupo de forma única, ex. org.apache.maven; org.apache.maven.plugins, org.apache.maven.reporting

artifactID - nome do jar sem a sua versão, ex. mavan; commons-math

version - número da versão, ex. 2.0.1, 1.3.1, 1.0

----
MAVEN
Create project:
$ mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false
$ cd my-app

Build:
$ mvn package

Compile phases:
1.validate
2.generate-sources
3.process-sources
4.generate-resources
5.process-resources
6.compile

Clean Lifecycle:
pre-clean	execute processes needed prior to the actual project cleaning
clean		remove all files generated by the previous build
post-clean	execute processes needed to finalize the project cleaning


---
GIT create a rep and do the 1st commit
$ cd project_folder 						# move to the root of the working folder to be imported 
$ git init 							# initialize a local git repo in this folder 
$ git remote add origin <REMOTE_URL>  				#must adapt the url for your repo 
$ git add.   							# mark all existing changes in this root to be commited 
$ git commit -m "Initial project setup for exercise 1_3" 	#create the commit snapshot locally $ git push -u origin main #uploads the local commit to the shared repo

--
EXERCICIO 1.3 commits da location1 e location2:

commit c9b5e1af944eca0208e08f60663d44fe401581f3 (HEAD -> master, origin/master)
Author: Tomás Candeias <tomaslcandeias@outlook.com>
Date:   Tue Oct 19 15:27:19 2021 +0100

    commit from location2: log4j2.xml with Log4Test.java inside the java folder

commit 9146f5b2f621bd0daf3754db3b6f7484dd9ba9d5
Author: Tomás Candeias <tomaslcandeias@outlook.com>
Date:   Tue Oct 19 14:55:17 2021 +0100

    lab1_2 & gitignore

---
DOCKER

Mapeamento de portos: 5432:5432 -> host:imagem

docker run 	-d 					-> correr em segundo plano
		-r 					-> remove o container quando ele é terminado
		-v local:container 			-> pasta do host:/var/lib/postgresql/data
		-e POSTGRES_PASSWORD='DOCKER'		-> define variável de ambiente


Docker: tecnologia que permite aos desenvolvedores empacotar, entregar e executar aplicações em containers

Container: um "ambiente isolado"

Container Image: imagem que é usada no container e que contém tudo o que é preciso para correr a aplicação (dependencias, confs, scripts, etc), bem como variáveis de ambiente para o container

Dockerfile deve ter este nome e nenhuma extensão associada

Kill all containers: docker kill $(docker ps -q)








